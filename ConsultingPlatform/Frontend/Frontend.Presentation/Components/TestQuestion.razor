@using Frontend.Models.Dtos
@using Frontend.Models.Dtos.Enums
<div class="question-container">
    <h3 class="question-text">@Question</h3>
    <div class="options">
        @foreach (var option in _options.Select((value, index) => new { value, index }))
        {
            <label class="option @(IsChecked(option.value) ? "selected" : "")">
                <input type="radio" name="@Question" value="@option.value.Key" @onchange="() => OnOptionSelected(option.value)" />
                <div class="circle @GetCircleClass(option.index)"></div>
                <span class="option-text">@option.value.Key</span>
            </label>
        }
    </div>
</div>

@code {

    [Parameter] 
    public required string Question { get; set; } = string.Empty;

    [Parameter] 
    public EventCallback<DreyfusSurveyResults> AnswerChanged { get; set; }

    [Parameter]
    public required DreyfusSurveyResults Answer { get; set; }

    [Parameter]
    public required DreyfusBlock QuestionBlock { get; set; }

    [Parameter]
    public required Dictionary<string, int> Options
    {
        get => _options;
        set
        {
            if (value is not { Count: 3 })
            {
                throw new ArgumentException("Options must contain exactly 3 elements.");
            }

            _options = value;
        }
    }

    private Dictionary<string, int> _options = null!;
    private KeyValuePair<string, int> _selectedOption;

    private void OnOptionSelected(KeyValuePair<string, int> option)
    {
        Answer?.AddResponse(QuestionBlock, option.Value);
        _selectedOption = option;
        AnswerChanged.InvokeAsync(Answer);
    }

    private bool IsChecked(KeyValuePair<string, int> option) => _selectedOption.Equals(option);

    private string GetCircleClass(int index)
    {
        return index switch
        {
            0 => "purple", 
            1 => "grey",  
            2 => "green", 
            _ => ""
        };
    }
}