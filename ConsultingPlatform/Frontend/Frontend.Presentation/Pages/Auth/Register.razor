@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@layout AuthLayout

<link rel="stylesheet" href="css/auth.css">
<EditForm Model="registerModel" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />

    <div class="auth-container">
        <div class="auth-card">
            <h2>Create an account</h2>

            <label>Email</label>
            <InputText @bind-Value="registerModel.Email" class="input" placeholder="Enter your email" />
            <ValidationMessage For="@(() => registerModel.Email)" />

            <label>Password</label>
            <InputText @bind-Value="registerModel.Password" class="input" type="password" placeholder="Enter your password" />
            <ValidationMessage For="@(() => registerModel.Password)" />

            <label>Confirm Password</label>
            <InputText @bind-Value="registerModel.ConfirmPassword" class="input" type="password" placeholder="Confirm your password" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />

            <button type="submit">SIGN UP</button>

            <p>Already have an account? <a href="/login">Login now!</a></p>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }
        </div>
    </div>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = "";

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7100/register", new { Email = registerModel.Email, Password = registerModel.Password });

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/email-confirmation?status=waiting&email=" + registerModel.Email);
        }
        else
        {
            errorMessage = "Registration failed. Please try again.";
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
