@page "/reset"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@layout AuthLayout

<link rel="stylesheet" href="css/auth.css">

<EditForm Model="_model" OnValidSubmit="ResetPasswordAsync">
    <DataAnnotationsValidator />

    <div class="auth-container">
        <div class="auth-card">
            <h2>Reset password</h2>

            <label>New password</label>
            <InputText @bind-Value="_model.Password" class="input" type="password" placeholder="Enter your password" />
            <ValidationMessage For="@(() => _model.Password)" />

            <label>Confirm Password</label>
            <InputText @bind-Value="_model.ConfirmPassword" class="input" type="password" placeholder="Confirm your password" />
            <ValidationMessage For="@(() => _model.ConfirmPassword)" />

            <button type="submit">SIGN UP</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }
        </div>
    </div>
</EditForm>

@code {
    private ResetPasswordModel _model = new();
    private string errorMessage = "";
    private string userId;
    private string token;

    protected override void OnInitialized()
    {
        var uri = Navigation.Uri;
        var queryParams = System.Web.HttpUtility.ParseQueryString(new Uri(uri).Query);
        userId = queryParams["userId"] ?? string.Empty;
        token = queryParams["token"] ?? string.Empty;
    }

    private async Task ResetPasswordAsync()
    {
        var response = await Http.PostAsJsonAsync($"https://localhost:7100/confirm-reset-password", new { UserId = userId, Token = token, NewPassword = _model.Password});

        var redirectUrl = await response.Content.ReadFromJsonAsync<string>();

        if (!string.IsNullOrEmpty(redirectUrl))
        {
            Navigation.NavigateTo(redirectUrl, forceLoad: true);
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
